 *Testes Unitários: tem por objetivo verificar cada unidade que compõe o software, isoladamente, para determinar se
 cada uma delas realiza o que foi especificado. A unidade é definida como um componente de software que não pode 
 ser dividido. Nesta fase as categorias de testes aplicáveis são: teste em estruturas internas, teste de 
 funcionalidade, teste de segurança;

 *Testes de Integração: têm por objetivo encontrar falhas de integração entre as unidades, e não mais em testar as 
funcionalidades da mesma. Nesta fase as categorias de testes aplicáveis são: testes de interface, testes de 
dependências entre os componentes;

 *Testes de Sistema: consiste na realização de vários tipos de teste que visam determinar se os componentes de um 
sistema computacional (envolvendo outros componentes de software e/ou de hardware) se integram bem e realizam as 
funcionalidades que lhes foram especificadas. Nesta fase as categorias de testes aplicáveis são: testes funcionais 
e testes não funcionais (performance, instalação, recuperação e carga);




Testes Automatizados

1 - Testes unitários 
{
    Resumo do que eu entendi, Teste unitarios vão testar cada fração do sistema individualmente,

    Um teste unitário basicamente é o teste da menor parte testável de um programa.
   Tá, mas o que isso quer dizer?
   Se você programa em uma linguagem que suporte paradígma funcional por exemplo, a menor parte testável do seu 
   código deve ser uma função. Então um teste unitário seria o teste de qualquer função. No caso de orientação a 
   objetos seria o teste de um método de seu objeto.
  Bom… como tudo é mais fácil de entender na prática, vamos ao código!
  No exemplo abaixo, temos uma função que soma dois números e retorna o valor da soma.

    Utilizar quando usamos TDD(projeto orientado a testes) 
    --> O teste unitário é uma metodologia que procura aferir a corretude do código, em sua menor fração. Em 
    linguagens orientadas a objetos, essa menor parte do código pode ser um método de uma classe
    https://www.devmedia.com.br/teste-unitario/#:~:text=O%20teste%20unit%C3%A1rio%20%C3%A9%20uma%20metodologia%20que%20procura,c%C3%B3digo%20pode%20ser%20um%20m%C3%A9todo%20de%20uma%20classe.
}
2- Teste de integração
{


    https://arquivo.devmedia.com.br/REVISTAS/es/imagens/72/8/1.png

    https://www.devmedia.com.br/teste-de-integracao-na-pratica/31877

    Teste de integração é a fase do teste de software em que módulos são combinados e testados em grupo. Ela 
    sucede o teste de unidade, em que os módulos são testados individualmente, e antecede o teste de sistema, em 
    que o sistema completo (integrado) é testado num ambiente que simula o ambiente de produção.

    O teste de integração é alimentado pelos módulos previamente testados individualmente pelo teste de unidade,
     agrupando-os assim em componentes, como estipulado no plano de teste, e resulta num sistema integrado e 
     preparado para o teste de sistema.

    O propósito do teste de integração é verificar os requisitos funcionais, de desempenho e de confiabilidade na 
    modelagem do sistema. Com ele é possível descobrir erros de interface entre os componentes do sistema.[1]

    Testa toda a aplicação
Testas:
-> request -> Routes -> Controllers -> Repository  
          ^                                      |
          |                                      v
          <- repository <- Controller <- response
}

3- Testes de ponta a ponta(E2E)//Mais para client, quase não para server 
